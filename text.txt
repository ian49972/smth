writefile("NUKE.mp3", game:HttpGet("https://github.com/ian49972/smth/raw/refs/heads/main/NUKE.mp3"))

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local workspace = game.Workspace
local camera = workspace.CurrentCamera
local runService = game:GetService("RunService")
local tweenService = game:GetService("TweenService")
local lighting = game:GetService("Lighting")

local originalAmbient = lighting.Ambient
local originalBrightness = lighting.Brightness

local customSound = Instance.new("Sound")
customSound.SoundId = getcustomasset("NUKE.mp3")
customSound.Volume = 1
customSound.Parent = workspace
customSound.Looped = true
customSound:Play()

wait(25)

local initialSound = Instance.new("Sound")
initialSound.SoundId = "rbxassetid://525254186"
initialSound.Volume = 6
initialSound.Parent = workspace
initialSound:Play()

local alarmSound = Instance.new("Sound")
alarmSound.SoundId = "rbxassetid://1526085476"
alarmSound.Volume = 6
alarmSound.Looped = true
alarmSound.Parent = workspace
alarmSound:Play()

local nukeStartSound = Instance.new("Sound")
nukeStartSound.SoundId = "rbxassetid://5005924196"
nukeStartSound.Volume = 6
nukeStartSound.Parent = workspace

local ambienceSound = Instance.new("Sound")
ambienceSound.SoundId = "rbxassetid://6670282148"
ambienceSound.Volume = 6
ambienceSound.Looped = true
ambienceSound.Parent = workspace

local nukeEndSound = Instance.new("Sound")
nukeEndSound.SoundId = "rbxassetid://8234114045"
nukeEndSound.Volume = 6
nukeEndSound.Parent = workspace

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

local messageFrame = Instance.new("Frame")
messageFrame.Size = UDim2.new(0.8, 0, 0.2, 0)
messageFrame.AnchorPoint = Vector2.new(0.5, 0.5)
messageFrame.Position = UDim2.new(-0.5, 0, 0.5, 0)
messageFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
messageFrame.BackgroundTransparency = 0.5
messageFrame.Parent = screenGui

local messageLabel1 = Instance.new("TextLabel")
messageLabel1.Size = UDim2.new(1, 0, 0.5, 0)
messageLabel1.Position = UDim2.new(0, 0, 0, 0)
messageLabel1.BackgroundTransparency = 1
messageLabel1.Text = "NUCLEAR DETONATION IN:"
messageLabel1.TextColor3 = Color3.fromRGB(255, 255, 255)
messageLabel1.TextSize = 40
messageLabel1.Font = Enum.Font.SourceSansBold
messageLabel1.Parent = messageFrame

local messageLabel2 = Instance.new("TextLabel")
messageLabel2.Size = UDim2.new(1, 0, 0.5, 0)
messageLabel2.Position = UDim2.new(0, 0, 0.5, 0)
messageLabel2.BackgroundTransparency = 1
messageLabel2.Text = "2 MINUTES"
messageLabel2.TextColor3 = Color3.fromRGB(255, 0, 0)
messageLabel2.TextSize = 40
messageLabel2.Font = Enum.Font.SourceSansBold
messageLabel2.Parent = messageFrame

local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
local slideIn = tweenService:Create(messageFrame, tweenInfo, {Position = UDim2.new(0.5, 0, 0.5, 0)})
slideIn:Play()
slideIn.Completed:Wait()

local function blinkText()
    for i = 1, 5 do
        tweenService:Create(messageLabel2, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
        wait(0.5)
        tweenService:Create(messageLabel2, TweenInfo.new(0.5), {TextTransparency = 0}):Play()
        wait(0.5)
    end
end
coroutine.wrap(blinkText)()

local timerFrame = Instance.new("Frame")
timerFrame.Size = UDim2.new(0.3, 0, 0.1, 0)
timerFrame.Position = UDim2.new(0.35, 0, 0.7, 0)
timerFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
timerFrame.BorderSizePixel = 0
timerFrame.Parent = screenGui

local uiStroke = Instance.new("UIStroke")
uiStroke.Thickness = 2
uiStroke.Parent = timerFrame

local function glow()
    while timerFrame.Parent do
        tweenService:Create(uiStroke, TweenInfo.new(1), {Color = Color3.fromRGB(255, 0, 0)}):Play()
        wait(1)
        tweenService:Create(uiStroke, TweenInfo.new(1), {Color = Color3.fromRGB(255, 255, 255)}):Play()
        wait(1)
    end
end
coroutine.wrap(glow)()

local timerLabel = Instance.new("TextLabel")
timerLabel.Size = UDim2.new(1, 0, 1, 0)
timerLabel.BackgroundTransparency = 1
timerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
timerLabel.TextSize = 50
timerLabel.Font = Enum.Font.SourceSansBold
timerLabel.Text = "2:00.0"
timerLabel.Parent = timerFrame

local evacuateLabel = Instance.new("TextLabel")
evacuateLabel.Size = UDim2.new(0.5, 0, 0.1, 0)
evacuateLabel.Position = UDim2.new(0.25, 0, 0.8, 0)
evacuateLabel.BackgroundTransparency = 1
evacuateLabel.Text = "EVACUATE IMMEDIATELY"
evacuateLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
evacuateLabel.TextSize = 40
evacuateLabel.Font = Enum.Font.SourceSansBold
evacuateLabel.Parent = screenGui

local function redWhiteLighting()
    while timerFrame.Parent do
        local redTween = tweenService:Create(lighting, TweenInfo.new(1), {Ambient = Color3.fromRGB(200, 0, 0), Brightness = 2})
        redTween:Play()
        redTween.Completed:Wait()
        wait(1)
        local whiteTween = tweenService:Create(lighting, TweenInfo.new(1), {Ambient = Color3.fromRGB(200, 200, 200), Brightness = 2})
        whiteTween:Play()
        whiteTween.Completed:Wait()
        wait(1)
    end
end
coroutine.wrap(redWhiteLighting)()

local totalTime = 120
local startTime = tick()
local connection
local hasDone60 = false
local hasDone30 = false
local activeShakeConnection = nil
local touchedParts = {} -- Debounce table for material changes

local function shakeCamera(magnitude, duration)
    if activeShakeConnection then
        activeShakeConnection:Disconnect()
        activeShakeConnection = nil
    end
    if duration <= 0 then
        return
    end
    local startShake = tick()
    activeShakeConnection = runService.RenderStepped:Connect(function()
        if tick() - startShake >= duration or not camera.Parent then
            if activeShakeConnection then
                activeShakeConnection:Disconnect()
                activeShakeConnection = nil
            end
            return
        end
        local offset = Vector3.new(
            math.random(-magnitude, magnitude),
            math.random(-magnitude, magnitude),
            math.random(-magnitude, magnitude)
        )
        camera.CFrame = camera.CFrame * CFrame.Angles(offset.X * 0.01, offset.Y * 0.01, offset.Z * 0.01)
    end)
end

local function startCountdown()
    shakeCamera(0.2, totalTime) -- Mild constant shake during countdown
    connection = runService.Heartbeat:Connect(function()
        local elapsed = tick() - startTime
        local remaining = totalTime - elapsed
        local remainingSeconds = math.floor(remaining)
        if remaining <= 0 then
            if connection then
                if connection.Connected then
                    connection:Disconnect()
                end
                connection = nil
            end
            screenGui:Destroy()
            alarmSound:Stop()
            nukeStartSound:Play()

            shakeCamera(1.5, 4) -- Strong shake for 4 seconds at explosion start

            local currentCharacter = player.Character or player.CharacterAdded:Wait()
            local model = game:GetObjects("rbxassetid://649191477")[1]
            if not model then
                return
            end
            model.Parent = workspace

            local playerPivot = currentCharacter:GetPivot()
            local farPosition = playerPivot * CFrame.new(0, 0, -10000) -- 10,000 studs away
            model:PivotTo(farPosition)

            -- Collect all MeshParts
            local parts = {}
            for _, descendant in ipairs(model:GetDescendants()) do
                if descendant:IsA("MeshPart") then
                    descendant.CanCollide = true
                    descendant.Anchored = true
                    table.insert(parts, descendant)
                end
            end
            if #parts == 0 then
                return
            end

            -- Continuous growth without limit
            local growthRate = 1.0 -- Increased for faster growth
            local growthConnection
            growthConnection = runService.Heartbeat:Connect(function(deltaTime)
                if not model or not model.Parent then
                    if growthConnection then
                        growthConnection:Disconnect()
                    end
                    return
                end
                for _, part in ipairs(parts) do
                    local currentSize = part.Size
                    local scaleFactor = 1 + (growthRate * deltaTime)
                    part.Size = currentSize * scaleFactor
                    -- Update CFrame to maintain relative positions
                    local relativeCFrame = farPosition:ToObjectSpace(part.CFrame)
                    part.CFrame = farPosition * relativeCFrame
                end
            end)

            -- Calculate model bounding box for Region3
            local function getModelRegion()
                local extents = model:GetExtentsSize()
                local center = farPosition.Position
                local halfSize = extents / 2
                local minPos = center - halfSize
                local maxPos = center + halfSize
                return Region3.new(minPos, maxPos)
            end

            -- Handle player death and material changes with Region3
            local materialConnection
            materialConnection = runService.Heartbeat:Connect(function()
                if not model or not model.Parent then
                    if materialConnection then
                        materialConnection:Disconnect()
                    end
                    return
                end
                local region = getModelRegion()
                local partsInRegion = workspace:FindPartsInRegion3(region, model, 1000)
                for _, part in ipairs(partsInRegion) do
                    if part:IsA("BasePart") and not table.find(parts, part) and not touchedParts[part] then
                        touchedParts[part] = true
                        part.Material = Enum.Material.CorrodedMetal
                    end
                    local hum = part.Parent:FindFirstChildWhichIsA("Humanoid")
                    if hum and hum.Parent == player.Character then
                        hum.Health = 0
                    end
                end
            end)

            -- Fallback: Touched events for each MeshPart
            for _, part in ipairs(parts) do
                part.Touched:Connect(function(hit)
                    local hum = hit.Parent:FindFirstChildWhichIsA("Humanoid")
                    if hum and hum.Parent == player.Character then
                        hum.Health = 0
                    end
                    if hit:IsA("BasePart") and not table.find(parts, hit) and not touchedParts[hit] then
                        touchedParts[hit] = true
                        hit.Material = Enum.Material.CorrodedMetal
                    end
                end)
            end

            nukeStartSound.Ended:Wait()
            ambienceSound:Play()
            tweenService:Create(lighting, TweenInfo.new(1), {Ambient = originalAmbient, Brightness = originalBrightness}):Play()

            wait(90)
            -- Fade out all parts
            local fadeTweenInfo = TweenInfo.new(10, Enum.EasingStyle.Linear)
            for _, part in ipairs(parts) do
                tweenService:Create(part, fadeTweenInfo, {Transparency = 1}):Play()
            end
            wait(10)
            if growthConnection then
                growthConnection:Disconnect()
            end
            if materialConnection then
                materialConnection:Disconnect()
            end
            if model then
                model:Destroy()
            end
            ambienceSound:Stop()
            customSound:Stop()
            nukeEndSound:Play()
        else
            local minutes = math.floor(remaining / 60)
            local seconds = math.floor(remaining % 60)
            local tenths = math.floor((remaining % 1) * 10)
            timerLabel.Text = string.format("%d:%02d.%d", minutes, seconds, tenths)

            if remainingSeconds <= 60 and not hasDone60 then
                hasDone60 = true
                local sound1 = Instance.new("Sound")
                sound1.SoundId = "rbxassetid://159445410"
                sound1.Volume = 6
                sound1.Parent = workspace
                sound1:Play()

                local shockwaveSound = Instance.new("Sound")
                shockwaveSound.SoundId = "rbxassetid://610327604"
                shockwaveSound.Volume = 6
                shockwaveSound.Parent = workspace
                shockwaveSound:Play()

                shakeCamera(2, 2)

                if math.random() < 0.5 then
                    local hum = player.Character and player.Character:FindFirstChildWhichIsA("Humanoid")
                    if hum then
                        hum.Health = 0
                    end
                end
            end

            if remainingSeconds <= 30 and not hasDone30 then
                hasDone30 = true
                local sound2 = Instance.new("Sound")
                sound2.SoundId = "rbxassetid://147060085"
                sound2.Volume = 6
                sound2.Parent = workspace
                sound2:Play()

                alarmSound:Stop()
                alarmSound = Instance.new("Sound")
                alarmSound.SoundId = "rbxassetid://243552660"
                alarmSound.Volume = 6
                alarmSound.Looped = true
                alarmSound.Parent = workspace
                alarmSound:Play()

                local shockwaveSound = Instance.new("Sound")
                shockwaveSound.SoundId = "rbxassetid://610327604"
                shockwaveSound.Volume = 6
                shockwaveSound.Parent = workspace
                shockwaveSound:Play()

                shakeCamera(2, 2)

                if math.random() < 0.5 then
                    local hum = player.Character and player.Character:FindFirstChildWhichIsA("Humanoid")
                    if hum then
                        hum.Health = 0
                    end
                end

                evacuateLabel.Text = "DETONATION IMMINENT"

                local function alternateTimerColor()
                    while timerFrame.Parent do
                        tweenService:Create(timerLabel, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(255, 255, 0)}):Play()
                        wait(0.5)
                        tweenService:Create(timerLabel, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(255, 255, 255)}):Play()
                        wait(0.5)
                    end
                end
                coroutine.wrap(alternateTimerColor)()
            end
        end
    end)
end

startCountdown()

wait(5)
local slideOut = tweenService:Create(messageFrame, tweenInfo, {Position = UDim2.new(-0.5, 0, 0.5, 0)})
slideOut:Play()
slideOut.Completed:Wait()
messageFrame:Destroy()